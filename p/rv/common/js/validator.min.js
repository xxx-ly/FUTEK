+ function($) {
    "use strict";

    function Plugin(t) {
        return this.each(function() {
            var e = $(this),
                a = $.extend({}, Validator.DEFAULTS, e.data(), "object" == typeof t && t),
                i = e.data("bs.validator");
            (i || "destroy" != t) && (i || e.data("bs.validator", i = new Validator(this, a)), "string" == typeof t && i[t]())
        })
    }
    var PATTERN_URL = /^((https?|ftp):\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/,
        PATTERN_EMAIL = /(([a-zA-Z0-9\-?\.?]+)@(([a-zA-Z0-9\-_]+\.)+)([a-z]{2,3}))+$/,
        inputSelector = ':input:not([type="submit"], button):enabled:visible',
        Validator = function(t, e) {
            this.$element = $(t), this.options = e, e.errors = $.extend({}, Validator.DEFAULTS.errors, e.errors);
            for (var a in e.custom)
                if (!e.errors[a]) throw new Error("Missing default error message for custom validator: " + a);
            $.extend(Validator.VALIDATORS, e.custom), this.$element.attr("novalidate", !0), this.toggleSubmit(), this.$element.on("input.bs.validator change.bs.validator focusout.bs.validator", $.proxy(this.validateInput, this)), this.$element.on("submit.bs.validator", $.proxy(this.onSubmit, this)), this.$element.find("[data-match]").each(function() {
                var t = $(this),
                    e = t.data("match");
                $(e).on("input.bs.validator", function(e) {
                    t.val() && t.trigger("input.bs.validator")
                })
            })
        };
    Validator.DEFAULTS = {
        delay: 500,
        html: !1,
        disable: !0,
        custom: {},
        errors: {
            match: "Does not match",
            minlength: "Not long enough",
            captcha: "Code does not match",
            atleastone: "At least one of the input elements is required",
            synchronize: "Data could not be replicated to target field",
            mselect: "At least 1 item is required",
            filetype: "Unsupported file type",
            maxfilesize: "Exceeds file size limit"
        },
        feedback: {
            success: "glyphicon-ok",
            error: "glyphicon-warning-sign"
        }
    };
    var checkValidityAlternative = function(t) {
            var e = t[0];
            if (e.checkValidity && !matchType(t, "url")) return e.checkValidity();
            var a, i = t.val();
            return t.is("[required]") && !i ? a = "Please fill out this field." : i && (matchType(t, "email") ? PATTERN_EMAIL.test(i) || (a = "Please enter an email address.") : matchType(t, "number") ? isNaN(i) && (a = "Please input a number.") : matchType(t, "url") ? PATTERN_URL.test(i) || (a = "Please enter a URL.") : t.is("[pattern]") && (new RegExp(t.attr("pattern")).test(i) || (a = "Please match the requested format."))), a ? (t.data("error", a), !1) : !0
        },
        matchType = function(t, e) {
            return t.is("[type=" + e + "]") || t.data("type") == e
        },
        skipValidation = function(t, e) {
            return e && !t.val() ? !0 : t.data("minlength") && !Validator.VALIDATORS.minlength(t)
        };
    Validator.VALIDATORS = {
        "native": function(t) {
            if (t.data("mselect")) return !0;
            t[0];
            return skipValidation(t) ? !0 : skipValidation(t) || checkValidityAlternative(t)
        },
        match: function(t) {
            var e = t.data("match");
            return skipValidation(t, !0) || t.val() === $(e).val()
        },
        minlength: function(t) {
            var e = t.data("minlength");
            return !t.val() || t.val().length >= e
        },
        captcha: function(t) {
            return skipValidation(t, !0) || t.realperson("getMatched")
        },
        atleastone: function(t) {
            var e = t.val();
            return e || t.closest("form").find(t.data("atleastone")).each(function() {
                $(this).val() && (e = !0)
            }), e
        },
        synchronize: function(t) {
            var e, a = t.closest("form").find(t.data("synchronize"));
            if (t.is("select")) {
                var i = t.children(":selected");
                e = i.data("synchronize-data") || i.val()
            } else e = t.data("synchronize-data") || t.val();
            return a.each(function() {
                var t = $(this);
                t.is(":input") ? t.val(e) : t.text(e)
            }), !0
        },
        mselect: function(t) {
            return t.val() ? !0 : !1
        },
        filetype: function(t) {
            if (!t.val()) return !0;
            var e = t.data("filetype"),
                a = "\\.(?:" + e + ")$";
            return new RegExp(a, "i").test(t.val())
        },
        maxfilesize: function($el) {
            if (!$el.val()) return !0;
            var fsize = 0,
                limit = eval($el.data("maxfilesize").toLowerCase().replace("k", "*1024").replace("m", "*1024*1024"));
            if (window.ActiveXObject) try {
                var fso = new ActiveXObject("Scripting.FileSystemObject"),
                    file = fso.getFile($el.val());
                fsize = file.size
            } catch (e) {
                log('validator.maxfilesize: failed in creation activex object "Scripting.FileSystemObject", got ' + e.message)
            } else fsize = $el[0].files[0].size;
            return log("validator.maxfilesize: fsize=" + fsize + ", limit=" + limit), limit >= fsize
        }
    }, Validator.prototype.validateInput = function(t) {
        var e = $(t.target),
            a = e.data("bs.validator.errors");
        if (e.is('[type="radio"]') && (e = this.$element.find('input[name="' + e.attr("name") + '"]')), this.$element.trigger(t = $.Event("validate.bs.validator", {
                relatedTarget: e[0]
            })), !t.isDefaultPrevented()) {
            var i = this;
            this.runValidators(e).done(function(r) {
                e.data("bs.validator.errors", r), r.length ? i.showErrors(e) : i.clearErrors(e), a && r.toString() === a.toString() || (t = r.length ? $.Event("invalid.bs.validator", {
                    relatedTarget: e[0],
                    detail: r
                }) : $.Event("valid.bs.validator", {
                    relatedTarget: e[0],
                    detail: a
                }), i.$element.trigger(t)), i.toggleSubmit(), i.$element.trigger($.Event("validated.bs.validator", {
                    relatedTarget: e[0]
                }))
            })
        }
    }, Validator.prototype.runValidators = function(t) {
        function e(e) {
            return t.data(e + "-error") || t.data("error") || "native" == e && t[0].validationMessage || r.errors[e]
        }
        var a = [],
            i = $.Deferred(),
            r = this.options;
        return t.data("bs.validator.deferred") && t.data("bs.validator.deferred").reject(), t.data("bs.validator.deferred", i), $.each(Validator.VALIDATORS, $.proxy(function(i, r) {
            if ((t.data(i) || "native" == i) && !r.call(this, t)) {
                var o = e(i);
                !~a.indexOf(o) && a.push(o)
            }
        }, this)), !a.length && t.val() && t.data("remote") ? this.defer(t, function() {
            var r = {};
            r[t.attr("name")] = t.val(), $.get(t.data("remote"), r).fail(function(t, i, r) {
                a.push(e("remote") || r)
            }).always(function() {
                i.resolve(a)
            })
        }) : i.resolve(a), i.promise()
    }, Validator.prototype.validate = function() {
        var t = this.options.delay;
        return this.options.delay = 0, this.$element.find(inputSelector).trigger("input.bs.validator"), this.options.delay = t, this
    }, Validator.prototype.showErrors = function(t) {
        var e = this.options.html ? "html" : "text";
        this.defer(t, function() {
            var a = t.closest(".form-group"),
                i = a.find(".help-block.with-errors"),
                r = a.find(".form-control-feedback"),
                o = t.data("bs.validator.errors");
            o.length && (o = $("<ul/>").addClass("list-unstyled").append($.map(o, function(t) {
                return $("<li/>")[e](t)
            })), void 0 === i.data("bs.validator.originalContent") && i.data("bs.validator.originalContent", i.html()), i.empty().append(o), a.addClass("has-error"), r.length && r.removeClass(this.options.feedback.success) && r.addClass(this.options.feedback.error) && a.removeClass("has-success"))
        })
    }, Validator.prototype.clearErrors = function(t) {
        var e = t.closest(".form-group"),
            a = e.find(".help-block.with-errors"),
            i = e.find(".form-control-feedback");
        a.html(a.data("bs.validator.originalContent")), e.removeClass("has-error"), i.length && i.removeClass(this.options.feedback.error) && i.addClass(this.options.feedback.success) && e.addClass("has-success")
    }, Validator.prototype.hasErrors = function() {
        function t() {
            return !!($(this).data("bs.validator.errors") || []).length
        }
        return !!this.$element.find(inputSelector).filter(t).length
    }, Validator.prototype.isIncomplete = function() {
        function t() {
            return "checkbox" === this.type ? !this.checked : "radio" === this.type ? !$('[name="' + this.name + '"]:checked').length : "" === $.trim(this.value)
        }
        return !!this.$element.find(inputSelector).filter("[required]").filter(t).length
    }, Validator.prototype.onSubmit = function(t) {
        this.validate(), (this.isIncomplete() || this.hasErrors()) && t.preventDefault()
    }, Validator.prototype.toggleSubmit = function() {
        if (this.options.disable) {
            var t = $('button[type="submit"], input[type="submit"]').filter('[form="' + this.$element.attr("id") + '"]').add(this.$element.find('input[type="submit"], button[type="submit"]'));
            t.toggleClass("disabled", this.isIncomplete() || this.hasErrors()).css({
                "pointer-events": "all",
                cursor: "pointer"
            })
        }
    }, Validator.prototype.defer = function(t, e) {
        return e = $.proxy(e, this), this.options.delay ? (window.clearTimeout(t.data("bs.validator.timeout")), void t.data("bs.validator.timeout", window.setTimeout(e, this.options.delay))) : e()
    }, Validator.prototype.destroy = function() {
        return this.$element.removeAttr("novalidate").removeData("bs.validator").off(".bs.validator"), this.$element.find(inputSelector).off(".bs.validator").removeData(["bs.validator.errors", "bs.validator.deferred"]).each(function() {
            var t = $(this),
                e = t.data("bs.validator.timeout");
            window.clearTimeout(e) && t.removeData("bs.validator.timeout")
        }), this.$element.find(".help-block.with-errors").each(function() {
            var t = $(this),
                e = t.data("bs.validator.originalContent");
            t.removeData("bs.validator.originalContent").html(e)
        }), this.$element.find('input[type="submit"], button[type="submit"]').removeClass("disabled"), this.$element.find(".has-error").removeClass("has-error"), this
    };
    var old = $.fn.validator;
    $.fn.validator = Plugin, $.fn.validator.Constructor = Validator, $.fn.validator.noConflict = function() {
        return $.fn.validator = old, this
    }, $(window).on("load", function() {
        $('form[data-toggle="validator"]').each(function() {
            var t = $(this);
            Plugin.call(t, t.data())
        })
    })
}(jQuery);